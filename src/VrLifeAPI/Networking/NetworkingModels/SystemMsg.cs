// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemMsg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VrLifeAPI.Networking.NetworkingModels {

  /// <summary>Holder for reflection information generated from SystemMsg.proto</summary>
  public static partial class SystemMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for SystemMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SystemMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9TeXN0ZW1Nc2cucHJvdG8SJVZyTGlmZUFQSS5OZXR3b3JraW5nLk5ldHdv",
            "cmtpbmdNb2RlbHMiwgMKCVN5c3RlbU1zZxI9CgVva01zZxgBIAEoCzIsLlZy",
            "TGlmZUFQSS5OZXR3b3JraW5nLk5ldHdvcmtpbmdNb2RlbHMuT2tNc2dIABJD",
            "CghlcnJvck1zZxgCIAEoCzIvLlZyTGlmZUFQSS5OZXR3b3JraW5nLk5ldHdv",
            "cmtpbmdNb2RlbHMuRXJyb3JNc2dIABI9CgVoaU1zZxgDIAEoCzIsLlZyTGlm",
            "ZUFQSS5OZXR3b3JraW5nLk5ldHdvcmtpbmdNb2RlbHMuSGlNc2dIABJJCgty",
            "ZWRpcmVjdE1zZxgEIAEoCzIyLlZyTGlmZUFQSS5OZXR3b3JraW5nLk5ldHdv",
            "cmtpbmdNb2RlbHMuUmVkaXJlY3RNc2dIABJBCgdzdGF0TXNnGAUgASgLMi4u",
            "VnJMaWZlQVBJLk5ldHdvcmtpbmcuTmV0d29ya2luZ01vZGVscy5TdGF0TXNn",
            "SAASUwoQcm9vbU1pZ3JhdGlvbk1zZxgGIAEoCzI3LlZyTGlmZUFQSS5OZXR3",
            "b3JraW5nLk5ldHdvcmtpbmdNb2RlbHMuUm9vbU1pZ3JhdGlvbk1zZ0gAQg8K",
            "DVN5c3RlbU1zZ1R5cGUiFgoFT2tNc2cSDQoFbXNnSWQYASABKAQiUQoIRXJy",
            "b3JNc2cSDQoFbXNnSWQYASABKAQSEQoJZXJyb3JUeXBlGAIgASgNEhEKCWVy",
            "cm9yQ29kZRgDIAEoDRIQCghlcnJvck1zZxgEIAEoCSJYCgVIaU1zZxIPCgdh",
            "ZGRyZXNzGAEgASgHEgwKBHBvcnQYAiABKAUSDwoHdGhyZWFkcxgDIAEoDRIO",
            "CgZtZW1vcnkYBCABKAQSDwoHdmVyc2lvbhgFIAEoCSJBCgtSZWRpcmVjdE1z",
            "ZxIPCgdhZGRyZXNzGAEgASgPEgwKBHBvcnQYAiABKAUSEwoLcmVjZWl2ZWRN",
            "c2cYAyABKAwiUwoHU3RhdE1zZxIQCghjcHVVc2FnZRgBIAEoDRISCgptZW1v",
            "cnlVc2VkGAIgASgEEhMKC21lbW9yeVRvdGFsGAMgASgEEg0KBXJvb21zGAQg",
            "ASgNIjQKEFJvb21NaWdyYXRpb25Nc2cSDwoHbWQ1c3VtSBgBIAEoEBIPCgdt",
            "ZDVzdW1MGAIgASgQYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeAPI.Networking.NetworkingModels.SystemMsg), global::VrLifeAPI.Networking.NetworkingModels.SystemMsg.Parser, new[]{ "OkMsg", "ErrorMsg", "HiMsg", "RedirectMsg", "StatMsg", "RoomMigrationMsg" }, new[]{ "SystemMsgType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeAPI.Networking.NetworkingModels.OkMsg), global::VrLifeAPI.Networking.NetworkingModels.OkMsg.Parser, new[]{ "MsgId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeAPI.Networking.NetworkingModels.ErrorMsg), global::VrLifeAPI.Networking.NetworkingModels.ErrorMsg.Parser, new[]{ "MsgId", "ErrorType", "ErrorCode", "ErrorMsg_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeAPI.Networking.NetworkingModels.HiMsg), global::VrLifeAPI.Networking.NetworkingModels.HiMsg.Parser, new[]{ "Address", "Port", "Threads", "Memory", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeAPI.Networking.NetworkingModels.RedirectMsg), global::VrLifeAPI.Networking.NetworkingModels.RedirectMsg.Parser, new[]{ "Address", "Port", "ReceivedMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeAPI.Networking.NetworkingModels.StatMsg), global::VrLifeAPI.Networking.NetworkingModels.StatMsg.Parser, new[]{ "CpuUsage", "MemoryUsed", "MemoryTotal", "Rooms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeAPI.Networking.NetworkingModels.RoomMigrationMsg), global::VrLifeAPI.Networking.NetworkingModels.RoomMigrationMsg.Parser, new[]{ "Md5SumH", "Md5SumL" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SystemMsg : pb::IMessage<SystemMsg> {
    private static readonly pb::MessageParser<SystemMsg> _parser = new pb::MessageParser<SystemMsg>(() => new SystemMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeAPI.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMsg(SystemMsg other) : this() {
      switch (other.SystemMsgTypeCase) {
        case SystemMsgTypeOneofCase.OkMsg:
          OkMsg = other.OkMsg.Clone();
          break;
        case SystemMsgTypeOneofCase.ErrorMsg:
          ErrorMsg = other.ErrorMsg.Clone();
          break;
        case SystemMsgTypeOneofCase.HiMsg:
          HiMsg = other.HiMsg.Clone();
          break;
        case SystemMsgTypeOneofCase.RedirectMsg:
          RedirectMsg = other.RedirectMsg.Clone();
          break;
        case SystemMsgTypeOneofCase.StatMsg:
          StatMsg = other.StatMsg.Clone();
          break;
        case SystemMsgTypeOneofCase.RoomMigrationMsg:
          RoomMigrationMsg = other.RoomMigrationMsg.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMsg Clone() {
      return new SystemMsg(this);
    }

    /// <summary>Field number for the "okMsg" field.</summary>
    public const int OkMsgFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeAPI.Networking.NetworkingModels.OkMsg OkMsg {
      get { return systemMsgTypeCase_ == SystemMsgTypeOneofCase.OkMsg ? (global::VrLifeAPI.Networking.NetworkingModels.OkMsg) systemMsgType_ : null; }
      set {
        systemMsgType_ = value;
        systemMsgTypeCase_ = value == null ? SystemMsgTypeOneofCase.None : SystemMsgTypeOneofCase.OkMsg;
      }
    }

    /// <summary>Field number for the "errorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeAPI.Networking.NetworkingModels.ErrorMsg ErrorMsg {
      get { return systemMsgTypeCase_ == SystemMsgTypeOneofCase.ErrorMsg ? (global::VrLifeAPI.Networking.NetworkingModels.ErrorMsg) systemMsgType_ : null; }
      set {
        systemMsgType_ = value;
        systemMsgTypeCase_ = value == null ? SystemMsgTypeOneofCase.None : SystemMsgTypeOneofCase.ErrorMsg;
      }
    }

    /// <summary>Field number for the "hiMsg" field.</summary>
    public const int HiMsgFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeAPI.Networking.NetworkingModels.HiMsg HiMsg {
      get { return systemMsgTypeCase_ == SystemMsgTypeOneofCase.HiMsg ? (global::VrLifeAPI.Networking.NetworkingModels.HiMsg) systemMsgType_ : null; }
      set {
        systemMsgType_ = value;
        systemMsgTypeCase_ = value == null ? SystemMsgTypeOneofCase.None : SystemMsgTypeOneofCase.HiMsg;
      }
    }

    /// <summary>Field number for the "redirectMsg" field.</summary>
    public const int RedirectMsgFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeAPI.Networking.NetworkingModels.RedirectMsg RedirectMsg {
      get { return systemMsgTypeCase_ == SystemMsgTypeOneofCase.RedirectMsg ? (global::VrLifeAPI.Networking.NetworkingModels.RedirectMsg) systemMsgType_ : null; }
      set {
        systemMsgType_ = value;
        systemMsgTypeCase_ = value == null ? SystemMsgTypeOneofCase.None : SystemMsgTypeOneofCase.RedirectMsg;
      }
    }

    /// <summary>Field number for the "statMsg" field.</summary>
    public const int StatMsgFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeAPI.Networking.NetworkingModels.StatMsg StatMsg {
      get { return systemMsgTypeCase_ == SystemMsgTypeOneofCase.StatMsg ? (global::VrLifeAPI.Networking.NetworkingModels.StatMsg) systemMsgType_ : null; }
      set {
        systemMsgType_ = value;
        systemMsgTypeCase_ = value == null ? SystemMsgTypeOneofCase.None : SystemMsgTypeOneofCase.StatMsg;
      }
    }

    /// <summary>Field number for the "roomMigrationMsg" field.</summary>
    public const int RoomMigrationMsgFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeAPI.Networking.NetworkingModels.RoomMigrationMsg RoomMigrationMsg {
      get { return systemMsgTypeCase_ == SystemMsgTypeOneofCase.RoomMigrationMsg ? (global::VrLifeAPI.Networking.NetworkingModels.RoomMigrationMsg) systemMsgType_ : null; }
      set {
        systemMsgType_ = value;
        systemMsgTypeCase_ = value == null ? SystemMsgTypeOneofCase.None : SystemMsgTypeOneofCase.RoomMigrationMsg;
      }
    }

    private object systemMsgType_;
    /// <summary>Enum of possible cases for the "SystemMsgType" oneof.</summary>
    public enum SystemMsgTypeOneofCase {
      None = 0,
      OkMsg = 1,
      ErrorMsg = 2,
      HiMsg = 3,
      RedirectMsg = 4,
      StatMsg = 5,
      RoomMigrationMsg = 6,
    }
    private SystemMsgTypeOneofCase systemMsgTypeCase_ = SystemMsgTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMsgTypeOneofCase SystemMsgTypeCase {
      get { return systemMsgTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSystemMsgType() {
      systemMsgTypeCase_ = SystemMsgTypeOneofCase.None;
      systemMsgType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SystemMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SystemMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OkMsg, other.OkMsg)) return false;
      if (!object.Equals(ErrorMsg, other.ErrorMsg)) return false;
      if (!object.Equals(HiMsg, other.HiMsg)) return false;
      if (!object.Equals(RedirectMsg, other.RedirectMsg)) return false;
      if (!object.Equals(StatMsg, other.StatMsg)) return false;
      if (!object.Equals(RoomMigrationMsg, other.RoomMigrationMsg)) return false;
      if (SystemMsgTypeCase != other.SystemMsgTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.OkMsg) hash ^= OkMsg.GetHashCode();
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.ErrorMsg) hash ^= ErrorMsg.GetHashCode();
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.HiMsg) hash ^= HiMsg.GetHashCode();
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.RedirectMsg) hash ^= RedirectMsg.GetHashCode();
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.StatMsg) hash ^= StatMsg.GetHashCode();
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.RoomMigrationMsg) hash ^= RoomMigrationMsg.GetHashCode();
      hash ^= (int) systemMsgTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.OkMsg) {
        output.WriteRawTag(10);
        output.WriteMessage(OkMsg);
      }
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.ErrorMsg) {
        output.WriteRawTag(18);
        output.WriteMessage(ErrorMsg);
      }
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.HiMsg) {
        output.WriteRawTag(26);
        output.WriteMessage(HiMsg);
      }
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.RedirectMsg) {
        output.WriteRawTag(34);
        output.WriteMessage(RedirectMsg);
      }
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.StatMsg) {
        output.WriteRawTag(42);
        output.WriteMessage(StatMsg);
      }
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.RoomMigrationMsg) {
        output.WriteRawTag(50);
        output.WriteMessage(RoomMigrationMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.OkMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OkMsg);
      }
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.ErrorMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ErrorMsg);
      }
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.HiMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HiMsg);
      }
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.RedirectMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedirectMsg);
      }
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.StatMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatMsg);
      }
      if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.RoomMigrationMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomMigrationMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SystemMsg other) {
      if (other == null) {
        return;
      }
      switch (other.SystemMsgTypeCase) {
        case SystemMsgTypeOneofCase.OkMsg:
          OkMsg = other.OkMsg;
          break;
        case SystemMsgTypeOneofCase.ErrorMsg:
          ErrorMsg = other.ErrorMsg;
          break;
        case SystemMsgTypeOneofCase.HiMsg:
          HiMsg = other.HiMsg;
          break;
        case SystemMsgTypeOneofCase.RedirectMsg:
          RedirectMsg = other.RedirectMsg;
          break;
        case SystemMsgTypeOneofCase.StatMsg:
          StatMsg = other.StatMsg;
          break;
        case SystemMsgTypeOneofCase.RoomMigrationMsg:
          RoomMigrationMsg = other.RoomMigrationMsg;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::VrLifeAPI.Networking.NetworkingModels.OkMsg subBuilder = new global::VrLifeAPI.Networking.NetworkingModels.OkMsg();
            if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.OkMsg) {
              subBuilder.MergeFrom(OkMsg);
            }
            input.ReadMessage(subBuilder);
            OkMsg = subBuilder;
            break;
          }
          case 18: {
            global::VrLifeAPI.Networking.NetworkingModels.ErrorMsg subBuilder = new global::VrLifeAPI.Networking.NetworkingModels.ErrorMsg();
            if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.ErrorMsg) {
              subBuilder.MergeFrom(ErrorMsg);
            }
            input.ReadMessage(subBuilder);
            ErrorMsg = subBuilder;
            break;
          }
          case 26: {
            global::VrLifeAPI.Networking.NetworkingModels.HiMsg subBuilder = new global::VrLifeAPI.Networking.NetworkingModels.HiMsg();
            if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.HiMsg) {
              subBuilder.MergeFrom(HiMsg);
            }
            input.ReadMessage(subBuilder);
            HiMsg = subBuilder;
            break;
          }
          case 34: {
            global::VrLifeAPI.Networking.NetworkingModels.RedirectMsg subBuilder = new global::VrLifeAPI.Networking.NetworkingModels.RedirectMsg();
            if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.RedirectMsg) {
              subBuilder.MergeFrom(RedirectMsg);
            }
            input.ReadMessage(subBuilder);
            RedirectMsg = subBuilder;
            break;
          }
          case 42: {
            global::VrLifeAPI.Networking.NetworkingModels.StatMsg subBuilder = new global::VrLifeAPI.Networking.NetworkingModels.StatMsg();
            if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.StatMsg) {
              subBuilder.MergeFrom(StatMsg);
            }
            input.ReadMessage(subBuilder);
            StatMsg = subBuilder;
            break;
          }
          case 50: {
            global::VrLifeAPI.Networking.NetworkingModels.RoomMigrationMsg subBuilder = new global::VrLifeAPI.Networking.NetworkingModels.RoomMigrationMsg();
            if (systemMsgTypeCase_ == SystemMsgTypeOneofCase.RoomMigrationMsg) {
              subBuilder.MergeFrom(RoomMigrationMsg);
            }
            input.ReadMessage(subBuilder);
            RoomMigrationMsg = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class OkMsg : pb::IMessage<OkMsg> {
    private static readonly pb::MessageParser<OkMsg> _parser = new pb::MessageParser<OkMsg>(() => new OkMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OkMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeAPI.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OkMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OkMsg(OkMsg other) : this() {
      msgId_ = other.msgId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OkMsg Clone() {
      return new OkMsg(this);
    }

    /// <summary>Field number for the "msgId" field.</summary>
    public const int MsgIdFieldNumber = 1;
    private ulong msgId_;
    /// <summary>
    ///  confirmed message ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OkMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OkMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgId != other.MsgId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgId != 0UL) hash ^= MsgId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OkMsg other) {
      if (other == null) {
        return;
      }
      if (other.MsgId != 0UL) {
        MsgId = other.MsgId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MsgId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ErrorMsg : pb::IMessage<ErrorMsg> {
    private static readonly pb::MessageParser<ErrorMsg> _parser = new pb::MessageParser<ErrorMsg>(() => new ErrorMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeAPI.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorMsg(ErrorMsg other) : this() {
      msgId_ = other.msgId_;
      errorType_ = other.errorType_;
      errorCode_ = other.errorCode_;
      errorMsg_ = other.errorMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorMsg Clone() {
      return new ErrorMsg(this);
    }

    /// <summary>Field number for the "msgId" field.</summary>
    public const int MsgIdFieldNumber = 1;
    private ulong msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "errorType" field.</summary>
    public const int ErrorTypeFieldNumber = 2;
    private uint errorType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorType {
      get { return errorType_; }
      set {
        errorType_ = value;
      }
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 3;
    private uint errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "errorMsg" field.</summary>
    public const int ErrorMsg_FieldNumber = 4;
    private string errorMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg_ {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgId != other.MsgId) return false;
      if (ErrorType != other.ErrorType) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMsg_ != other.ErrorMsg_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgId != 0UL) hash ^= MsgId.GetHashCode();
      if (ErrorType != 0) hash ^= ErrorType.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorMsg_.Length != 0) hash ^= ErrorMsg_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgId);
      }
      if (ErrorType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ErrorType);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ErrorCode);
      }
      if (ErrorMsg_.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ErrorMsg_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgId);
      }
      if (ErrorType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrorType);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrorCode);
      }
      if (ErrorMsg_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg_);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorMsg other) {
      if (other == null) {
        return;
      }
      if (other.MsgId != 0UL) {
        MsgId = other.MsgId;
      }
      if (other.ErrorType != 0) {
        ErrorType = other.ErrorType;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMsg_.Length != 0) {
        ErrorMsg_ = other.ErrorMsg_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MsgId = input.ReadUInt64();
            break;
          }
          case 16: {
            ErrorType = input.ReadUInt32();
            break;
          }
          case 24: {
            ErrorCode = input.ReadUInt32();
            break;
          }
          case 34: {
            ErrorMsg_ = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HiMsg : pb::IMessage<HiMsg> {
    private static readonly pb::MessageParser<HiMsg> _parser = new pb::MessageParser<HiMsg>(() => new HiMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HiMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeAPI.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HiMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HiMsg(HiMsg other) : this() {
      address_ = other.address_;
      port_ = other.port_;
      threads_ = other.threads_;
      memory_ = other.memory_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HiMsg Clone() {
      return new HiMsg(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private uint address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "threads" field.</summary>
    public const int ThreadsFieldNumber = 3;
    private uint threads_;
    /// <summary>
    ///  number of machine's threads
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Threads {
      get { return threads_; }
      set {
        threads_ = value;
      }
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 4;
    private ulong memory_;
    /// <summary>
    ///  number of RAM in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Memory {
      get { return memory_; }
      set {
        memory_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private string version_ = "";
    /// <summary>
    ///  server version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HiMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HiMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Port != other.Port) return false;
      if (Threads != other.Threads) return false;
      if (Memory != other.Memory) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address != 0) hash ^= Address.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Threads != 0) hash ^= Threads.GetHashCode();
      if (Memory != 0UL) hash ^= Memory.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Address);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (Threads != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Threads);
      }
      if (Memory != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Memory);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address != 0) {
        size += 1 + 4;
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Threads != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Threads);
      }
      if (Memory != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Memory);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HiMsg other) {
      if (other == null) {
        return;
      }
      if (other.Address != 0) {
        Address = other.Address;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Threads != 0) {
        Threads = other.Threads;
      }
      if (other.Memory != 0UL) {
        Memory = other.Memory;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Address = input.ReadFixed32();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 24: {
            Threads = input.ReadUInt32();
            break;
          }
          case 32: {
            Memory = input.ReadUInt64();
            break;
          }
          case 42: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  redirection to server which takes care of this client
  /// </summary>
  public sealed partial class RedirectMsg : pb::IMessage<RedirectMsg> {
    private static readonly pb::MessageParser<RedirectMsg> _parser = new pb::MessageParser<RedirectMsg>(() => new RedirectMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedirectMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeAPI.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectMsg(RedirectMsg other) : this() {
      address_ = other.address_;
      port_ = other.port_;
      receivedMsg_ = other.receivedMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectMsg Clone() {
      return new RedirectMsg(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private int address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "receivedMsg" field.</summary>
    public const int ReceivedMsgFieldNumber = 3;
    private pb::ByteString receivedMsg_ = pb::ByteString.Empty;
    /// <summary>
    ///  message which server received from client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReceivedMsg {
      get { return receivedMsg_; }
      set {
        receivedMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedirectMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedirectMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Port != other.Port) return false;
      if (ReceivedMsg != other.ReceivedMsg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address != 0) hash ^= Address.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ReceivedMsg.Length != 0) hash ^= ReceivedMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Address);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (ReceivedMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ReceivedMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address != 0) {
        size += 1 + 4;
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (ReceivedMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReceivedMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedirectMsg other) {
      if (other == null) {
        return;
      }
      if (other.Address != 0) {
        Address = other.Address;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ReceivedMsg.Length != 0) {
        ReceivedMsg = other.ReceivedMsg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Address = input.ReadSFixed32();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 26: {
            ReceivedMsg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatMsg : pb::IMessage<StatMsg> {
    private static readonly pb::MessageParser<StatMsg> _parser = new pb::MessageParser<StatMsg>(() => new StatMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeAPI.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatMsg(StatMsg other) : this() {
      cpuUsage_ = other.cpuUsage_;
      memoryUsed_ = other.memoryUsed_;
      memoryTotal_ = other.memoryTotal_;
      rooms_ = other.rooms_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatMsg Clone() {
      return new StatMsg(this);
    }

    /// <summary>Field number for the "cpuUsage" field.</summary>
    public const int CpuUsageFieldNumber = 1;
    private uint cpuUsage_;
    /// <summary>
    ///  percentage usage of CPU
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CpuUsage {
      get { return cpuUsage_; }
      set {
        cpuUsage_ = value;
      }
    }

    /// <summary>Field number for the "memoryUsed" field.</summary>
    public const int MemoryUsedFieldNumber = 2;
    private ulong memoryUsed_;
    /// <summary>
    ///  used RAM of machine in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemoryUsed {
      get { return memoryUsed_; }
      set {
        memoryUsed_ = value;
      }
    }

    /// <summary>Field number for the "memoryTotal" field.</summary>
    public const int MemoryTotalFieldNumber = 3;
    private ulong memoryTotal_;
    /// <summary>
    ///  total available RAM in machine
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemoryTotal {
      get { return memoryTotal_; }
      set {
        memoryTotal_ = value;
      }
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 4;
    private uint rooms_;
    /// <summary>
    ///  number of running rooms on machine
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rooms {
      get { return rooms_; }
      set {
        rooms_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CpuUsage != other.CpuUsage) return false;
      if (MemoryUsed != other.MemoryUsed) return false;
      if (MemoryTotal != other.MemoryTotal) return false;
      if (Rooms != other.Rooms) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CpuUsage != 0) hash ^= CpuUsage.GetHashCode();
      if (MemoryUsed != 0UL) hash ^= MemoryUsed.GetHashCode();
      if (MemoryTotal != 0UL) hash ^= MemoryTotal.GetHashCode();
      if (Rooms != 0) hash ^= Rooms.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CpuUsage != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CpuUsage);
      }
      if (MemoryUsed != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MemoryUsed);
      }
      if (MemoryTotal != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MemoryTotal);
      }
      if (Rooms != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Rooms);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CpuUsage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CpuUsage);
      }
      if (MemoryUsed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemoryUsed);
      }
      if (MemoryTotal != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemoryTotal);
      }
      if (Rooms != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rooms);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatMsg other) {
      if (other == null) {
        return;
      }
      if (other.CpuUsage != 0) {
        CpuUsage = other.CpuUsage;
      }
      if (other.MemoryUsed != 0UL) {
        MemoryUsed = other.MemoryUsed;
      }
      if (other.MemoryTotal != 0UL) {
        MemoryTotal = other.MemoryTotal;
      }
      if (other.Rooms != 0) {
        Rooms = other.Rooms;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CpuUsage = input.ReadUInt32();
            break;
          }
          case 16: {
            MemoryUsed = input.ReadUInt64();
            break;
          }
          case 24: {
            MemoryTotal = input.ReadUInt64();
            break;
          }
          case 32: {
            Rooms = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  migration message to another server
  /// </summary>
  public sealed partial class RoomMigrationMsg : pb::IMessage<RoomMigrationMsg> {
    private static readonly pb::MessageParser<RoomMigrationMsg> _parser = new pb::MessageParser<RoomMigrationMsg>(() => new RoomMigrationMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomMigrationMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeAPI.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMigrationMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMigrationMsg(RoomMigrationMsg other) : this() {
      md5SumH_ = other.md5SumH_;
      md5SumL_ = other.md5SumL_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMigrationMsg Clone() {
      return new RoomMigrationMsg(this);
    }

    /// <summary>Field number for the "md5sumH" field.</summary>
    public const int Md5SumHFieldNumber = 1;
    private long md5SumH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Md5SumH {
      get { return md5SumH_; }
      set {
        md5SumH_ = value;
      }
    }

    /// <summary>Field number for the "md5sumL" field.</summary>
    public const int Md5SumLFieldNumber = 2;
    private long md5SumL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Md5SumL {
      get { return md5SumL_; }
      set {
        md5SumL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomMigrationMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomMigrationMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Md5SumH != other.Md5SumH) return false;
      if (Md5SumL != other.Md5SumL) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Md5SumH != 0L) hash ^= Md5SumH.GetHashCode();
      if (Md5SumL != 0L) hash ^= Md5SumL.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Md5SumH != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Md5SumH);
      }
      if (Md5SumL != 0L) {
        output.WriteRawTag(17);
        output.WriteSFixed64(Md5SumL);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Md5SumH != 0L) {
        size += 1 + 8;
      }
      if (Md5SumL != 0L) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomMigrationMsg other) {
      if (other == null) {
        return;
      }
      if (other.Md5SumH != 0L) {
        Md5SumH = other.Md5SumH;
      }
      if (other.Md5SumL != 0L) {
        Md5SumL = other.Md5SumL;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Md5SumH = input.ReadSFixed64();
            break;
          }
          case 17: {
            Md5SumL = input.ReadSFixed64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
