// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EventMsg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VrLifeAPI.Networking.NetworkingModels {

  /// <summary>Holder for reflection information generated from EventMsg.proto</summary>
  public static partial class EventMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for EventMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5FdmVudE1zZy5wcm90bxIlVnJMaWZlQVBJLk5ldHdvcmtpbmcuTmV0d29y",
            "a2luZ01vZGVscxoPRGF0YVR5cGVzLnByb3RvGg9TeXN0ZW1Nc2cucHJvdG8i",
            "tgEKCEV2ZW50TXNnEksKDGV2ZW50RGF0YU1zZxgBIAEoCzIzLlZyTGlmZUFQ",
            "SS5OZXR3b3JraW5nLk5ldHdvcmtpbmdNb2RlbHMuRXZlbnREYXRhTXNnSAAS",
            "TQoNZXZlbnRSZXNwb25zZRgCIAEoCzI0LlZyTGlmZUFQSS5OZXR3b3JraW5n",
            "Lk5ldHdvcmtpbmdNb2RlbHMuRXZlbnRSZXNwb25zZUgAQg4KDEV2ZW50TXNn",
            "VHlwZSLJAgoMRXZlbnREYXRhTXNnEg8KB2V2ZW50SWQYASABKAQSEQoJZXZl",
            "bnRUeXBlGAIgASgNEhMKCWxvbmdWYWx1ZRgDIAEoBEgAEhUKC2RvdWJsZVZh",
            "bHVlGAQgASgBSAASSAoNc2tlbGV0b25WYWx1ZRgFIAEoCzIvLlZyTGlmZUFQ",
            "SS5OZXR3b3JraW5nLk5ldHdvcmtpbmdNb2RlbHMuU2tlbGV0b25IABJICgtv",
            "YmplY3RWYWx1ZRgGIAEoCzIxLlZyTGlmZUFQSS5OZXR3b3JraW5nLk5ldHdv",
            "cmtpbmdNb2RlbHMuR2FtZU9iamVjdEgAEhUKC3N0cmluZ1ZhbHVlGAcgASgJ",
            "SAASFQoLY3VzdG9tVmFsdWUYCCABKAxIABIPCgVhcHBJZBgJIAEoBEgBQgsK",
            "CVZhbHVlVHlwZUIJCgdBcHBUeXBlIqwBCg1FdmVudFJlc3BvbnNlEhMKC3By",
            "b2Nlc3NUaW1lGAEgASgNEhEKCWV2ZW50TWFzaxgCIAEoDRIWCg5oaWdoZXN0",
            "RXZlbnRJZBgDIAEoBBIOCgRkYXRhGAQgASgMSAASQAoFZXJyb3IYBSABKAsy",
            "Ly5WckxpZmVBUEkuTmV0d29ya2luZy5OZXR3b3JraW5nTW9kZWxzLkVycm9y",
            "TXNnSABCCQoHaGFzRGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::VrLifeAPI.Networking.NetworkingModels.DataTypesReflection.Descriptor, global::VrLifeAPI.Networking.NetworkingModels.SystemMsgReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeAPI.Networking.NetworkingModels.EventMsg), global::VrLifeAPI.Networking.NetworkingModels.EventMsg.Parser, new[]{ "EventDataMsg", "EventResponse" }, new[]{ "EventMsgType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeAPI.Networking.NetworkingModels.EventDataMsg), global::VrLifeAPI.Networking.NetworkingModels.EventDataMsg.Parser, new[]{ "EventId", "EventType", "LongValue", "DoubleValue", "SkeletonValue", "ObjectValue", "StringValue", "CustomValue", "AppId" }, new[]{ "ValueType", "AppType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeAPI.Networking.NetworkingModels.EventResponse), global::VrLifeAPI.Networking.NetworkingModels.EventResponse.Parser, new[]{ "ProcessTime", "EventMask", "HighestEventId", "Data", "Error" }, new[]{ "HasData" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EventMsg : pb::IMessage<EventMsg> {
    private static readonly pb::MessageParser<EventMsg> _parser = new pb::MessageParser<EventMsg>(() => new EventMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeAPI.Networking.NetworkingModels.EventMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMsg(EventMsg other) : this() {
      switch (other.EventMsgTypeCase) {
        case EventMsgTypeOneofCase.EventDataMsg:
          EventDataMsg = other.EventDataMsg.Clone();
          break;
        case EventMsgTypeOneofCase.EventResponse:
          EventResponse = other.EventResponse.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMsg Clone() {
      return new EventMsg(this);
    }

    /// <summary>Field number for the "eventDataMsg" field.</summary>
    public const int EventDataMsgFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeAPI.Networking.NetworkingModels.EventDataMsg EventDataMsg {
      get { return eventMsgTypeCase_ == EventMsgTypeOneofCase.EventDataMsg ? (global::VrLifeAPI.Networking.NetworkingModels.EventDataMsg) eventMsgType_ : null; }
      set {
        eventMsgType_ = value;
        eventMsgTypeCase_ = value == null ? EventMsgTypeOneofCase.None : EventMsgTypeOneofCase.EventDataMsg;
      }
    }

    /// <summary>Field number for the "eventResponse" field.</summary>
    public const int EventResponseFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeAPI.Networking.NetworkingModels.EventResponse EventResponse {
      get { return eventMsgTypeCase_ == EventMsgTypeOneofCase.EventResponse ? (global::VrLifeAPI.Networking.NetworkingModels.EventResponse) eventMsgType_ : null; }
      set {
        eventMsgType_ = value;
        eventMsgTypeCase_ = value == null ? EventMsgTypeOneofCase.None : EventMsgTypeOneofCase.EventResponse;
      }
    }

    private object eventMsgType_;
    /// <summary>Enum of possible cases for the "EventMsgType" oneof.</summary>
    public enum EventMsgTypeOneofCase {
      None = 0,
      EventDataMsg = 1,
      EventResponse = 2,
    }
    private EventMsgTypeOneofCase eventMsgTypeCase_ = EventMsgTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMsgTypeOneofCase EventMsgTypeCase {
      get { return eventMsgTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventMsgType() {
      eventMsgTypeCase_ = EventMsgTypeOneofCase.None;
      eventMsgType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EventDataMsg, other.EventDataMsg)) return false;
      if (!object.Equals(EventResponse, other.EventResponse)) return false;
      if (EventMsgTypeCase != other.EventMsgTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventMsgTypeCase_ == EventMsgTypeOneofCase.EventDataMsg) hash ^= EventDataMsg.GetHashCode();
      if (eventMsgTypeCase_ == EventMsgTypeOneofCase.EventResponse) hash ^= EventResponse.GetHashCode();
      hash ^= (int) eventMsgTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventMsgTypeCase_ == EventMsgTypeOneofCase.EventDataMsg) {
        output.WriteRawTag(10);
        output.WriteMessage(EventDataMsg);
      }
      if (eventMsgTypeCase_ == EventMsgTypeOneofCase.EventResponse) {
        output.WriteRawTag(18);
        output.WriteMessage(EventResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventMsgTypeCase_ == EventMsgTypeOneofCase.EventDataMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventDataMsg);
      }
      if (eventMsgTypeCase_ == EventMsgTypeOneofCase.EventResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventResponse);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMsg other) {
      if (other == null) {
        return;
      }
      switch (other.EventMsgTypeCase) {
        case EventMsgTypeOneofCase.EventDataMsg:
          EventDataMsg = other.EventDataMsg;
          break;
        case EventMsgTypeOneofCase.EventResponse:
          EventResponse = other.EventResponse;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::VrLifeAPI.Networking.NetworkingModels.EventDataMsg subBuilder = new global::VrLifeAPI.Networking.NetworkingModels.EventDataMsg();
            if (eventMsgTypeCase_ == EventMsgTypeOneofCase.EventDataMsg) {
              subBuilder.MergeFrom(EventDataMsg);
            }
            input.ReadMessage(subBuilder);
            EventDataMsg = subBuilder;
            break;
          }
          case 18: {
            global::VrLifeAPI.Networking.NetworkingModels.EventResponse subBuilder = new global::VrLifeAPI.Networking.NetworkingModels.EventResponse();
            if (eventMsgTypeCase_ == EventMsgTypeOneofCase.EventResponse) {
              subBuilder.MergeFrom(EventResponse);
            }
            input.ReadMessage(subBuilder);
            EventResponse = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Event message from client to server
  /// </summary>
  public sealed partial class EventDataMsg : pb::IMessage<EventDataMsg> {
    private static readonly pb::MessageParser<EventDataMsg> _parser = new pb::MessageParser<EventDataMsg>(() => new EventDataMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventDataMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeAPI.Networking.NetworkingModels.EventMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDataMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDataMsg(EventDataMsg other) : this() {
      eventId_ = other.eventId_;
      eventType_ = other.eventType_;
      switch (other.ValueTypeCase) {
        case ValueTypeOneofCase.LongValue:
          LongValue = other.LongValue;
          break;
        case ValueTypeOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueTypeOneofCase.SkeletonValue:
          SkeletonValue = other.SkeletonValue.Clone();
          break;
        case ValueTypeOneofCase.ObjectValue:
          ObjectValue = other.ObjectValue.Clone();
          break;
        case ValueTypeOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueTypeOneofCase.CustomValue:
          CustomValue = other.CustomValue;
          break;
      }

      switch (other.AppTypeCase) {
        case AppTypeOneofCase.AppId:
          AppId = other.AppId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDataMsg Clone() {
      return new EventDataMsg(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private ulong eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 2;
    private uint eventType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "longValue" field.</summary>
    public const int LongValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LongValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.LongValue ? (ulong) valueType_ : 0UL; }
      set {
        valueType_ = value;
        valueTypeCase_ = ValueTypeOneofCase.LongValue;
      }
    }

    /// <summary>Field number for the "doubleValue" field.</summary>
    public const int DoubleValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.DoubleValue ? (double) valueType_ : 0D; }
      set {
        valueType_ = value;
        valueTypeCase_ = ValueTypeOneofCase.DoubleValue;
      }
    }

    /// <summary>Field number for the "skeletonValue" field.</summary>
    public const int SkeletonValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeAPI.Networking.NetworkingModels.Skeleton SkeletonValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.SkeletonValue ? (global::VrLifeAPI.Networking.NetworkingModels.Skeleton) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.SkeletonValue;
      }
    }

    /// <summary>Field number for the "objectValue" field.</summary>
    public const int ObjectValueFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeAPI.Networking.NetworkingModels.GameObject ObjectValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.ObjectValue ? (global::VrLifeAPI.Networking.NetworkingModels.GameObject) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.ObjectValue;
      }
    }

    /// <summary>Field number for the "stringValue" field.</summary>
    public const int StringValueFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.StringValue ? (string) valueType_ : ""; }
      set {
        valueType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueTypeCase_ = ValueTypeOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "customValue" field.</summary>
    public const int CustomValueFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CustomValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.CustomValue ? (pb::ByteString) valueType_ : pb::ByteString.Empty; }
      set {
        valueType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueTypeCase_ = ValueTypeOneofCase.CustomValue;
      }
    }

    /// <summary>Field number for the "appId" field.</summary>
    public const int AppIdFieldNumber = 9;
    /// <summary>
    ///  Nullable&lt;uint>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AppId {
      get { return appTypeCase_ == AppTypeOneofCase.AppId ? (ulong) appType_ : 0UL; }
      set {
        appType_ = value;
        appTypeCase_ = AppTypeOneofCase.AppId;
      }
    }

    private object valueType_;
    /// <summary>Enum of possible cases for the "ValueType" oneof.</summary>
    public enum ValueTypeOneofCase {
      None = 0,
      LongValue = 3,
      DoubleValue = 4,
      SkeletonValue = 5,
      ObjectValue = 6,
      StringValue = 7,
      CustomValue = 8,
    }
    private ValueTypeOneofCase valueTypeCase_ = ValueTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueTypeOneofCase ValueTypeCase {
      get { return valueTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValueType() {
      valueTypeCase_ = ValueTypeOneofCase.None;
      valueType_ = null;
    }

    private object appType_;
    /// <summary>Enum of possible cases for the "AppType" oneof.</summary>
    public enum AppTypeOneofCase {
      None = 0,
      AppId = 9,
    }
    private AppTypeOneofCase appTypeCase_ = AppTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppTypeOneofCase AppTypeCase {
      get { return appTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAppType() {
      appTypeCase_ = AppTypeOneofCase.None;
      appType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventDataMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventDataMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (EventType != other.EventType) return false;
      if (LongValue != other.LongValue) return false;
      if (DoubleValue != other.DoubleValue) return false;
      if (!object.Equals(SkeletonValue, other.SkeletonValue)) return false;
      if (!object.Equals(ObjectValue, other.ObjectValue)) return false;
      if (StringValue != other.StringValue) return false;
      if (CustomValue != other.CustomValue) return false;
      if (AppId != other.AppId) return false;
      if (ValueTypeCase != other.ValueTypeCase) return false;
      if (AppTypeCase != other.AppTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId != 0UL) hash ^= EventId.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.LongValue) hash ^= LongValue.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.DoubleValue) hash ^= DoubleValue.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.SkeletonValue) hash ^= SkeletonValue.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.ObjectValue) hash ^= ObjectValue.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.CustomValue) hash ^= CustomValue.GetHashCode();
      if (appTypeCase_ == AppTypeOneofCase.AppId) hash ^= AppId.GetHashCode();
      hash ^= (int) valueTypeCase_;
      hash ^= (int) appTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EventId);
      }
      if (EventType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EventType);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.LongValue) {
        output.WriteRawTag(24);
        output.WriteUInt64(LongValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.DoubleValue) {
        output.WriteRawTag(33);
        output.WriteDouble(DoubleValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.SkeletonValue) {
        output.WriteRawTag(42);
        output.WriteMessage(SkeletonValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.ObjectValue) {
        output.WriteRawTag(50);
        output.WriteMessage(ObjectValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.StringValue) {
        output.WriteRawTag(58);
        output.WriteString(StringValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.CustomValue) {
        output.WriteRawTag(66);
        output.WriteBytes(CustomValue);
      }
      if (appTypeCase_ == AppTypeOneofCase.AppId) {
        output.WriteRawTag(72);
        output.WriteUInt64(AppId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventId);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventType);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.LongValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LongValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.DoubleValue) {
        size += 1 + 8;
      }
      if (valueTypeCase_ == ValueTypeOneofCase.SkeletonValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkeletonValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.ObjectValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.CustomValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CustomValue);
      }
      if (appTypeCase_ == AppTypeOneofCase.AppId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AppId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventDataMsg other) {
      if (other == null) {
        return;
      }
      if (other.EventId != 0UL) {
        EventId = other.EventId;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      switch (other.ValueTypeCase) {
        case ValueTypeOneofCase.LongValue:
          LongValue = other.LongValue;
          break;
        case ValueTypeOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueTypeOneofCase.SkeletonValue:
          SkeletonValue = other.SkeletonValue;
          break;
        case ValueTypeOneofCase.ObjectValue:
          ObjectValue = other.ObjectValue;
          break;
        case ValueTypeOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueTypeOneofCase.CustomValue:
          CustomValue = other.CustomValue;
          break;
      }

      switch (other.AppTypeCase) {
        case AppTypeOneofCase.AppId:
          AppId = other.AppId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EventId = input.ReadUInt64();
            break;
          }
          case 16: {
            EventType = input.ReadUInt32();
            break;
          }
          case 24: {
            LongValue = input.ReadUInt64();
            break;
          }
          case 33: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 42: {
            global::VrLifeAPI.Networking.NetworkingModels.Skeleton subBuilder = new global::VrLifeAPI.Networking.NetworkingModels.Skeleton();
            if (valueTypeCase_ == ValueTypeOneofCase.SkeletonValue) {
              subBuilder.MergeFrom(SkeletonValue);
            }
            input.ReadMessage(subBuilder);
            SkeletonValue = subBuilder;
            break;
          }
          case 50: {
            global::VrLifeAPI.Networking.NetworkingModels.GameObject subBuilder = new global::VrLifeAPI.Networking.NetworkingModels.GameObject();
            if (valueTypeCase_ == ValueTypeOneofCase.ObjectValue) {
              subBuilder.MergeFrom(ObjectValue);
            }
            input.ReadMessage(subBuilder);
            ObjectValue = subBuilder;
            break;
          }
          case 58: {
            StringValue = input.ReadString();
            break;
          }
          case 66: {
            CustomValue = input.ReadBytes();
            break;
          }
          case 72: {
            AppId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventResponse : pb::IMessage<EventResponse> {
    private static readonly pb::MessageParser<EventResponse> _parser = new pb::MessageParser<EventResponse>(() => new EventResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeAPI.Networking.NetworkingModels.EventMsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventResponse(EventResponse other) : this() {
      processTime_ = other.processTime_;
      eventMask_ = other.eventMask_;
      highestEventId_ = other.highestEventId_;
      switch (other.HasDataCase) {
        case HasDataOneofCase.Data:
          Data = other.Data;
          break;
        case HasDataOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventResponse Clone() {
      return new EventResponse(this);
    }

    /// <summary>Field number for the "processTime" field.</summary>
    public const int ProcessTimeFieldNumber = 1;
    private uint processTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProcessTime {
      get { return processTime_; }
      set {
        processTime_ = value;
      }
    }

    /// <summary>Field number for the "eventMask" field.</summary>
    public const int EventMaskFieldNumber = 2;
    private uint eventMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventMask {
      get { return eventMask_; }
      set {
        eventMask_ = value;
      }
    }

    /// <summary>Field number for the "highestEventId" field.</summary>
    public const int HighestEventIdFieldNumber = 3;
    private ulong highestEventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HighestEventId {
      get { return highestEventId_; }
      set {
        highestEventId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return hasDataCase_ == HasDataOneofCase.Data ? (pb::ByteString) hasData_ : pb::ByteString.Empty; }
      set {
        hasData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        hasDataCase_ = HasDataOneofCase.Data;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeAPI.Networking.NetworkingModels.ErrorMsg Error {
      get { return hasDataCase_ == HasDataOneofCase.Error ? (global::VrLifeAPI.Networking.NetworkingModels.ErrorMsg) hasData_ : null; }
      set {
        hasData_ = value;
        hasDataCase_ = value == null ? HasDataOneofCase.None : HasDataOneofCase.Error;
      }
    }

    private object hasData_;
    /// <summary>Enum of possible cases for the "hasData" oneof.</summary>
    public enum HasDataOneofCase {
      None = 0,
      Data = 4,
      Error = 5,
    }
    private HasDataOneofCase hasDataCase_ = HasDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HasDataOneofCase HasDataCase {
      get { return hasDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasData() {
      hasDataCase_ = HasDataOneofCase.None;
      hasData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProcessTime != other.ProcessTime) return false;
      if (EventMask != other.EventMask) return false;
      if (HighestEventId != other.HighestEventId) return false;
      if (Data != other.Data) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (HasDataCase != other.HasDataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProcessTime != 0) hash ^= ProcessTime.GetHashCode();
      if (EventMask != 0) hash ^= EventMask.GetHashCode();
      if (HighestEventId != 0UL) hash ^= HighestEventId.GetHashCode();
      if (hasDataCase_ == HasDataOneofCase.Data) hash ^= Data.GetHashCode();
      if (hasDataCase_ == HasDataOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) hasDataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProcessTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ProcessTime);
      }
      if (EventMask != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EventMask);
      }
      if (HighestEventId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(HighestEventId);
      }
      if (hasDataCase_ == HasDataOneofCase.Data) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (hasDataCase_ == HasDataOneofCase.Error) {
        output.WriteRawTag(42);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProcessTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProcessTime);
      }
      if (EventMask != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventMask);
      }
      if (HighestEventId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HighestEventId);
      }
      if (hasDataCase_ == HasDataOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (hasDataCase_ == HasDataOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventResponse other) {
      if (other == null) {
        return;
      }
      if (other.ProcessTime != 0) {
        ProcessTime = other.ProcessTime;
      }
      if (other.EventMask != 0) {
        EventMask = other.EventMask;
      }
      if (other.HighestEventId != 0UL) {
        HighestEventId = other.HighestEventId;
      }
      switch (other.HasDataCase) {
        case HasDataOneofCase.Data:
          Data = other.Data;
          break;
        case HasDataOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProcessTime = input.ReadUInt32();
            break;
          }
          case 16: {
            EventMask = input.ReadUInt32();
            break;
          }
          case 24: {
            HighestEventId = input.ReadUInt64();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 42: {
            global::VrLifeAPI.Networking.NetworkingModels.ErrorMsg subBuilder = new global::VrLifeAPI.Networking.NetworkingModels.ErrorMsg();
            if (hasDataCase_ == HasDataOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
