// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EventMsg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VrLifeShared.Networking.NetworkingModels {

  /// <summary>Holder for reflection information generated from EventMsg.proto</summary>
  public static partial class EventMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for EventMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5FdmVudE1zZy5wcm90bxIoVnJMaWZlU2hhcmVkLk5ldHdvcmtpbmcuTmV0",
            "d29ya2luZ01vZGVscyKcAQoIRXZlbnRNc2cSDgoGcm9vbUlkGAEgASgNEhEK",
            "CWV2ZW50VHlwZRgCIAEoDRISCghpbnRWYWx1ZRgDIAEoDUgAEhQKCmZsb2F0",
            "VmFsdWUYBCABKAJIABIVCgtjdXN0b21WYWx1ZRgFIAEoDEgAEhQKCmluc3Rh",
            "bmNlSWQYBiABKA1IAUILCglWYWx1ZVR5cGVCCQoHQXBwVHlwZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeShared.Networking.NetworkingModels.EventMsg), global::VrLifeShared.Networking.NetworkingModels.EventMsg.Parser, new[]{ "RoomId", "EventType", "IntValue", "FloatValue", "CustomValue", "InstanceId" }, new[]{ "ValueType", "AppType" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Event message from client to server
  /// </summary>
  public sealed partial class EventMsg : pb::IMessage<EventMsg> {
    private static readonly pb::MessageParser<EventMsg> _parser = new pb::MessageParser<EventMsg>(() => new EventMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeShared.Networking.NetworkingModels.EventMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMsg(EventMsg other) : this() {
      roomId_ = other.roomId_;
      eventType_ = other.eventType_;
      switch (other.ValueTypeCase) {
        case ValueTypeOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
        case ValueTypeOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case ValueTypeOneofCase.CustomValue:
          CustomValue = other.CustomValue;
          break;
      }

      switch (other.AppTypeCase) {
        case AppTypeOneofCase.InstanceId:
          InstanceId = other.InstanceId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMsg Clone() {
      return new EventMsg(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private uint roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 2;
    private uint eventType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "intValue" field.</summary>
    public const int IntValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.IntValue ? (uint) valueType_ : 0; }
      set {
        valueType_ = value;
        valueTypeCase_ = ValueTypeOneofCase.IntValue;
      }
    }

    /// <summary>Field number for the "floatValue" field.</summary>
    public const int FloatValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.FloatValue ? (float) valueType_ : 0F; }
      set {
        valueType_ = value;
        valueTypeCase_ = ValueTypeOneofCase.FloatValue;
      }
    }

    /// <summary>Field number for the "customValue" field.</summary>
    public const int CustomValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CustomValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.CustomValue ? (pb::ByteString) valueType_ : pb::ByteString.Empty; }
      set {
        valueType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueTypeCase_ = ValueTypeOneofCase.CustomValue;
      }
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 6;
    /// <summary>
    ///  Nullable&lt;uint>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return appTypeCase_ == AppTypeOneofCase.InstanceId ? (uint) appType_ : 0; }
      set {
        appType_ = value;
        appTypeCase_ = AppTypeOneofCase.InstanceId;
      }
    }

    private object valueType_;
    /// <summary>Enum of possible cases for the "ValueType" oneof.</summary>
    public enum ValueTypeOneofCase {
      None = 0,
      IntValue = 3,
      FloatValue = 4,
      CustomValue = 5,
    }
    private ValueTypeOneofCase valueTypeCase_ = ValueTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueTypeOneofCase ValueTypeCase {
      get { return valueTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValueType() {
      valueTypeCase_ = ValueTypeOneofCase.None;
      valueType_ = null;
    }

    private object appType_;
    /// <summary>Enum of possible cases for the "AppType" oneof.</summary>
    public enum AppTypeOneofCase {
      None = 0,
      InstanceId = 6,
    }
    private AppTypeOneofCase appTypeCase_ = AppTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppTypeOneofCase AppTypeCase {
      get { return appTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAppType() {
      appTypeCase_ = AppTypeOneofCase.None;
      appType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (EventType != other.EventType) return false;
      if (IntValue != other.IntValue) return false;
      if (FloatValue != other.FloatValue) return false;
      if (CustomValue != other.CustomValue) return false;
      if (InstanceId != other.InstanceId) return false;
      if (ValueTypeCase != other.ValueTypeCase) return false;
      if (AppTypeCase != other.AppTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.IntValue) hash ^= IntValue.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.FloatValue) hash ^= FloatValue.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.CustomValue) hash ^= CustomValue.GetHashCode();
      if (appTypeCase_ == AppTypeOneofCase.InstanceId) hash ^= InstanceId.GetHashCode();
      hash ^= (int) valueTypeCase_;
      hash ^= (int) appTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomId);
      }
      if (EventType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EventType);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.IntValue) {
        output.WriteRawTag(24);
        output.WriteUInt32(IntValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.FloatValue) {
        output.WriteRawTag(37);
        output.WriteFloat(FloatValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.CustomValue) {
        output.WriteRawTag(42);
        output.WriteBytes(CustomValue);
      }
      if (appTypeCase_ == AppTypeOneofCase.InstanceId) {
        output.WriteRawTag(48);
        output.WriteUInt32(InstanceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventType);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.IntValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.FloatValue) {
        size += 1 + 4;
      }
      if (valueTypeCase_ == ValueTypeOneofCase.CustomValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CustomValue);
      }
      if (appTypeCase_ == AppTypeOneofCase.InstanceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMsg other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      switch (other.ValueTypeCase) {
        case ValueTypeOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
        case ValueTypeOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case ValueTypeOneofCase.CustomValue:
          CustomValue = other.CustomValue;
          break;
      }

      switch (other.AppTypeCase) {
        case AppTypeOneofCase.InstanceId:
          InstanceId = other.InstanceId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 16: {
            EventType = input.ReadUInt32();
            break;
          }
          case 24: {
            IntValue = input.ReadUInt32();
            break;
          }
          case 37: {
            FloatValue = input.ReadFloat();
            break;
          }
          case 42: {
            CustomValue = input.ReadBytes();
            break;
          }
          case 48: {
            InstanceId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
