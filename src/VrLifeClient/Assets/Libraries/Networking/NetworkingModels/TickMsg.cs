// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TickMsg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VrLifeShared.Networking.NetworkingModels {

  /// <summary>Holder for reflection information generated from TickMsg.proto</summary>
  public static partial class TickMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for TickMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TickMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1UaWNrTXNnLnByb3RvEihWckxpZmVTaGFyZWQuTmV0d29ya2luZy5OZXR3",
            "b3JraW5nTW9kZWxzGg9EYXRhVHlwZXMucHJvdG8ivgEKB1RpY2tNc2cSVAoP",
            "c25hcHNob3RSZXF1ZXN0GAEgASgLMjkuVnJMaWZlU2hhcmVkLk5ldHdvcmtp",
            "bmcuTmV0d29ya2luZ01vZGVscy5TbmFwc2hvdFJlcXVlc3RIABJOCgxzbmFw",
            "c2hvdERhdGEYAiABKAsyNi5WckxpZmVTaGFyZWQuTmV0d29ya2luZy5OZXR3",
            "b3JraW5nTW9kZWxzLlNuYXBzaG90RGF0YUgAQg0KC1RpY2tNc2dUeXBlIq0B",
            "CgxTbmFwc2hvdERhdGESDwoHdGlja051bRgBIAEoBBJFCglza2VsZXRvbnMY",
            "AiADKAsyMi5WckxpZmVTaGFyZWQuTmV0d29ya2luZy5OZXR3b3JraW5nTW9k",
            "ZWxzLlNrZWxldG9uEkUKB29iamVjdHMYAyADKAsyNC5WckxpZmVTaGFyZWQu",
            "TmV0d29ya2luZy5OZXR3b3JraW5nTW9kZWxzLkdhbWVPYmplY3QiRAoPU25h",
            "cHNob3RSZXF1ZXN0Eg4KBnVzZXJJZBgBIAEoBBIPCgdsYXN0UlRUGAIgASgN",
            "EhAKCGxhc3RUaWNrGAMgASgEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::VrLifeShared.Networking.NetworkingModels.DataTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeShared.Networking.NetworkingModels.TickMsg), global::VrLifeShared.Networking.NetworkingModels.TickMsg.Parser, new[]{ "SnapshotRequest", "SnapshotData" }, new[]{ "TickMsgType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeShared.Networking.NetworkingModels.SnapshotData), global::VrLifeShared.Networking.NetworkingModels.SnapshotData.Parser, new[]{ "TickNum", "Skeletons", "Objects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeShared.Networking.NetworkingModels.SnapshotRequest), global::VrLifeShared.Networking.NetworkingModels.SnapshotRequest.Parser, new[]{ "UserId", "LastRTT", "LastTick" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Tick information for client
  /// </summary>
  public sealed partial class TickMsg : pb::IMessage<TickMsg> {
    private static readonly pb::MessageParser<TickMsg> _parser = new pb::MessageParser<TickMsg>(() => new TickMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TickMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeShared.Networking.NetworkingModels.TickMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TickMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TickMsg(TickMsg other) : this() {
      switch (other.TickMsgTypeCase) {
        case TickMsgTypeOneofCase.SnapshotRequest:
          SnapshotRequest = other.SnapshotRequest.Clone();
          break;
        case TickMsgTypeOneofCase.SnapshotData:
          SnapshotData = other.SnapshotData.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TickMsg Clone() {
      return new TickMsg(this);
    }

    /// <summary>Field number for the "snapshotRequest" field.</summary>
    public const int SnapshotRequestFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeShared.Networking.NetworkingModels.SnapshotRequest SnapshotRequest {
      get { return tickMsgTypeCase_ == TickMsgTypeOneofCase.SnapshotRequest ? (global::VrLifeShared.Networking.NetworkingModels.SnapshotRequest) tickMsgType_ : null; }
      set {
        tickMsgType_ = value;
        tickMsgTypeCase_ = value == null ? TickMsgTypeOneofCase.None : TickMsgTypeOneofCase.SnapshotRequest;
      }
    }

    /// <summary>Field number for the "snapshotData" field.</summary>
    public const int SnapshotDataFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeShared.Networking.NetworkingModels.SnapshotData SnapshotData {
      get { return tickMsgTypeCase_ == TickMsgTypeOneofCase.SnapshotData ? (global::VrLifeShared.Networking.NetworkingModels.SnapshotData) tickMsgType_ : null; }
      set {
        tickMsgType_ = value;
        tickMsgTypeCase_ = value == null ? TickMsgTypeOneofCase.None : TickMsgTypeOneofCase.SnapshotData;
      }
    }

    private object tickMsgType_;
    /// <summary>Enum of possible cases for the "TickMsgType" oneof.</summary>
    public enum TickMsgTypeOneofCase {
      None = 0,
      SnapshotRequest = 1,
      SnapshotData = 2,
    }
    private TickMsgTypeOneofCase tickMsgTypeCase_ = TickMsgTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TickMsgTypeOneofCase TickMsgTypeCase {
      get { return tickMsgTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTickMsgType() {
      tickMsgTypeCase_ = TickMsgTypeOneofCase.None;
      tickMsgType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TickMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TickMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SnapshotRequest, other.SnapshotRequest)) return false;
      if (!object.Equals(SnapshotData, other.SnapshotData)) return false;
      if (TickMsgTypeCase != other.TickMsgTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tickMsgTypeCase_ == TickMsgTypeOneofCase.SnapshotRequest) hash ^= SnapshotRequest.GetHashCode();
      if (tickMsgTypeCase_ == TickMsgTypeOneofCase.SnapshotData) hash ^= SnapshotData.GetHashCode();
      hash ^= (int) tickMsgTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tickMsgTypeCase_ == TickMsgTypeOneofCase.SnapshotRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(SnapshotRequest);
      }
      if (tickMsgTypeCase_ == TickMsgTypeOneofCase.SnapshotData) {
        output.WriteRawTag(18);
        output.WriteMessage(SnapshotData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tickMsgTypeCase_ == TickMsgTypeOneofCase.SnapshotRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SnapshotRequest);
      }
      if (tickMsgTypeCase_ == TickMsgTypeOneofCase.SnapshotData) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SnapshotData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TickMsg other) {
      if (other == null) {
        return;
      }
      switch (other.TickMsgTypeCase) {
        case TickMsgTypeOneofCase.SnapshotRequest:
          SnapshotRequest = other.SnapshotRequest;
          break;
        case TickMsgTypeOneofCase.SnapshotData:
          SnapshotData = other.SnapshotData;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::VrLifeShared.Networking.NetworkingModels.SnapshotRequest subBuilder = new global::VrLifeShared.Networking.NetworkingModels.SnapshotRequest();
            if (tickMsgTypeCase_ == TickMsgTypeOneofCase.SnapshotRequest) {
              subBuilder.MergeFrom(SnapshotRequest);
            }
            input.ReadMessage(subBuilder);
            SnapshotRequest = subBuilder;
            break;
          }
          case 18: {
            global::VrLifeShared.Networking.NetworkingModels.SnapshotData subBuilder = new global::VrLifeShared.Networking.NetworkingModels.SnapshotData();
            if (tickMsgTypeCase_ == TickMsgTypeOneofCase.SnapshotData) {
              subBuilder.MergeFrom(SnapshotData);
            }
            input.ReadMessage(subBuilder);
            SnapshotData = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class SnapshotData : pb::IMessage<SnapshotData> {
    private static readonly pb::MessageParser<SnapshotData> _parser = new pb::MessageParser<SnapshotData>(() => new SnapshotData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapshotData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeShared.Networking.NetworkingModels.TickMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotData(SnapshotData other) : this() {
      tickNum_ = other.tickNum_;
      skeletons_ = other.skeletons_.Clone();
      objects_ = other.objects_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotData Clone() {
      return new SnapshotData(this);
    }

    /// <summary>Field number for the "tickNum" field.</summary>
    public const int TickNumFieldNumber = 1;
    private ulong tickNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TickNum {
      get { return tickNum_; }
      set {
        tickNum_ = value;
      }
    }

    /// <summary>Field number for the "skeletons" field.</summary>
    public const int SkeletonsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VrLifeShared.Networking.NetworkingModels.Skeleton> _repeated_skeletons_codec
        = pb::FieldCodec.ForMessage(18, global::VrLifeShared.Networking.NetworkingModels.Skeleton.Parser);
    private readonly pbc::RepeatedField<global::VrLifeShared.Networking.NetworkingModels.Skeleton> skeletons_ = new pbc::RepeatedField<global::VrLifeShared.Networking.NetworkingModels.Skeleton>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrLifeShared.Networking.NetworkingModels.Skeleton> Skeletons {
      get { return skeletons_; }
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::VrLifeShared.Networking.NetworkingModels.GameObject> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(26, global::VrLifeShared.Networking.NetworkingModels.GameObject.Parser);
    private readonly pbc::RepeatedField<global::VrLifeShared.Networking.NetworkingModels.GameObject> objects_ = new pbc::RepeatedField<global::VrLifeShared.Networking.NetworkingModels.GameObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrLifeShared.Networking.NetworkingModels.GameObject> Objects {
      get { return objects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapshotData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapshotData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TickNum != other.TickNum) return false;
      if(!skeletons_.Equals(other.skeletons_)) return false;
      if(!objects_.Equals(other.objects_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TickNum != 0UL) hash ^= TickNum.GetHashCode();
      hash ^= skeletons_.GetHashCode();
      hash ^= objects_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TickNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TickNum);
      }
      skeletons_.WriteTo(output, _repeated_skeletons_codec);
      objects_.WriteTo(output, _repeated_objects_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TickNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TickNum);
      }
      size += skeletons_.CalculateSize(_repeated_skeletons_codec);
      size += objects_.CalculateSize(_repeated_objects_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapshotData other) {
      if (other == null) {
        return;
      }
      if (other.TickNum != 0UL) {
        TickNum = other.TickNum;
      }
      skeletons_.Add(other.skeletons_);
      objects_.Add(other.objects_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TickNum = input.ReadUInt64();
            break;
          }
          case 18: {
            skeletons_.AddEntriesFrom(input, _repeated_skeletons_codec);
            break;
          }
          case 26: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SnapshotRequest : pb::IMessage<SnapshotRequest> {
    private static readonly pb::MessageParser<SnapshotRequest> _parser = new pb::MessageParser<SnapshotRequest>(() => new SnapshotRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapshotRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeShared.Networking.NetworkingModels.TickMsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotRequest(SnapshotRequest other) : this() {
      userId_ = other.userId_;
      lastRTT_ = other.lastRTT_;
      lastTick_ = other.lastTick_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotRequest Clone() {
      return new SnapshotRequest(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "lastRTT" field.</summary>
    public const int LastRTTFieldNumber = 2;
    private uint lastRTT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastRTT {
      get { return lastRTT_; }
      set {
        lastRTT_ = value;
      }
    }

    /// <summary>Field number for the "lastTick" field.</summary>
    public const int LastTickFieldNumber = 3;
    private ulong lastTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastTick {
      get { return lastTick_; }
      set {
        lastTick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapshotRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapshotRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (LastRTT != other.LastRTT) return false;
      if (LastTick != other.LastTick) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (LastRTT != 0) hash ^= LastRTT.GetHashCode();
      if (LastTick != 0UL) hash ^= LastTick.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (LastRTT != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastRTT);
      }
      if (LastTick != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(LastTick);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (LastRTT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastRTT);
      }
      if (LastTick != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastTick);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapshotRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.LastRTT != 0) {
        LastRTT = other.LastRTT;
      }
      if (other.LastTick != 0UL) {
        LastTick = other.LastTick;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            LastRTT = input.ReadUInt32();
            break;
          }
          case 24: {
            LastTick = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
