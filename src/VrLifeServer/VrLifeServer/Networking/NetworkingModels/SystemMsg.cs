// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemMsg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VrLifeServer.Networking.NetworkingModels {

  /// <summary>Holder for reflection information generated from SystemMsg.proto</summary>
  public static partial class SystemMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for SystemMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SystemMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9TeXN0ZW1Nc2cucHJvdG8SKFZyTGlmZVNlcnZlci5OZXR3b3JraW5nLk5l",
            "dHdvcmtpbmdNb2RlbHMilwQKCVN5c3RlbU1zZxJFCgR0eXBlGAEgASgOMjcu",
            "VnJMaWZlU2VydmVyLk5ldHdvcmtpbmcuTmV0d29ya2luZ01vZGVscy5TeXN0",
            "ZW1Nc2dUeXBlEkAKBW9rTXNnGAIgASgLMi8uVnJMaWZlU2VydmVyLk5ldHdv",
            "cmtpbmcuTmV0d29ya2luZ01vZGVscy5Pa01zZ0gAEkYKCGVycm9yTXNnGAMg",
            "ASgLMjIuVnJMaWZlU2VydmVyLk5ldHdvcmtpbmcuTmV0d29ya2luZ01vZGVs",
            "cy5FcnJvck1zZ0gAEkAKBWhpTXNnGAQgASgLMi8uVnJMaWZlU2VydmVyLk5l",
            "dHdvcmtpbmcuTmV0d29ya2luZ01vZGVscy5IaU1zZ0gAEkwKC3JlZGlyZWN0",
            "TXNnGAUgASgLMjUuVnJMaWZlU2VydmVyLk5ldHdvcmtpbmcuTmV0d29ya2lu",
            "Z01vZGVscy5SZWRpcmVjdE1zZ0gAEkQKB3N0YXRNc2cYBiABKAsyMS5Wckxp",
            "ZmVTZXJ2ZXIuTmV0d29ya2luZy5OZXR3b3JraW5nTW9kZWxzLlN0YXRNc2dI",
            "ABJWChByb29tTWlncmF0aW9uTXNnGAcgASgLMjouVnJMaWZlU2VydmVyLk5l",
            "dHdvcmtpbmcuTmV0d29ya2luZ01vZGVscy5Sb29tTWlncmF0aW9uTXNnSABC",
            "CwoJb25lb2Zfc3lzIhYKBU9rTXNnEg0KBW1zZ0lkGAEgASgEIlEKCEVycm9y",
            "TXNnEg0KBW1zZ0lkGAEgASgEEhEKCWVycm9yVHlwZRgCIAEoDRIRCgllcnJv",
            "ckNvZGUYAyABKA0SEAoIZXJyb3JNc2cYBCABKAkiKAoFSGlNc2cSDwoHdGhy",
            "ZWFkcxgBIAEoDRIOCgZtZW1vcnkYAiABKAQiQQoLUmVkaXJlY3RNc2cSDwoH",
            "YWRkcmVzcxgBIAEoEBIMCgRwb3J0GAIgASgFEhMKC3JlY2VpdmVkTXNnGAMg",
            "ASgMIlYKB1N0YXRNc2cSEwoLdGhyZWFkVXNhZ2UYASADKA0SEgoKbWVtb3J5",
            "VXNlZBgCIAEoBBITCgttZW1vcnlUb3RhbBgDIAEoBBINCgVyb29tcxgEIAEo",
            "DSI0ChBSb29tTWlncmF0aW9uTXNnEg8KB21kNXN1bUgYASABKBASDwoHbWQ1",
            "c3VtTBgCIAEoECpuCg1TeXN0ZW1Nc2dUeXBlEgoKBkhJX01TRxAAEgoKBk9L",
            "X01TRxABEg0KCUVSUk9SX01TRxACEgwKCFNUQVRfTVNHEAMSEAoMUkVESVJF",
            "Q1RfTVNHEAQSFgoSUk9PTV9NSUdSQVRJT05fTVNHEAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::VrLifeServer.Networking.NetworkingModels.SystemMsgType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeServer.Networking.NetworkingModels.SystemMsg), global::VrLifeServer.Networking.NetworkingModels.SystemMsg.Parser, new[]{ "Type", "OkMsg", "ErrorMsg", "HiMsg", "RedirectMsg", "StatMsg", "RoomMigrationMsg" }, new[]{ "OneofSys" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeServer.Networking.NetworkingModels.OkMsg), global::VrLifeServer.Networking.NetworkingModels.OkMsg.Parser, new[]{ "MsgId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeServer.Networking.NetworkingModels.ErrorMsg), global::VrLifeServer.Networking.NetworkingModels.ErrorMsg.Parser, new[]{ "MsgId", "ErrorType", "ErrorCode", "ErrorMsg_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeServer.Networking.NetworkingModels.HiMsg), global::VrLifeServer.Networking.NetworkingModels.HiMsg.Parser, new[]{ "Threads", "Memory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeServer.Networking.NetworkingModels.RedirectMsg), global::VrLifeServer.Networking.NetworkingModels.RedirectMsg.Parser, new[]{ "Address", "Port", "ReceivedMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeServer.Networking.NetworkingModels.StatMsg), global::VrLifeServer.Networking.NetworkingModels.StatMsg.Parser, new[]{ "ThreadUsage", "MemoryUsed", "MemoryTotal", "Rooms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrLifeServer.Networking.NetworkingModels.RoomMigrationMsg), global::VrLifeServer.Networking.NetworkingModels.RoomMigrationMsg.Parser, new[]{ "Md5SumH", "Md5SumL" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SystemMsgType {
    [pbr::OriginalName("HI_MSG")] HiMsg = 0,
    [pbr::OriginalName("OK_MSG")] OkMsg = 1,
    [pbr::OriginalName("ERROR_MSG")] ErrorMsg = 2,
    [pbr::OriginalName("STAT_MSG")] StatMsg = 3,
    [pbr::OriginalName("REDIRECT_MSG")] RedirectMsg = 4,
    [pbr::OriginalName("ROOM_MIGRATION_MSG")] RoomMigrationMsg = 5,
  }

  #endregion

  #region Messages
  public sealed partial class SystemMsg : pb::IMessage<SystemMsg> {
    private static readonly pb::MessageParser<SystemMsg> _parser = new pb::MessageParser<SystemMsg>(() => new SystemMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeServer.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMsg(SystemMsg other) : this() {
      type_ = other.type_;
      switch (other.OneofSysCase) {
        case OneofSysOneofCase.OkMsg:
          OkMsg = other.OkMsg.Clone();
          break;
        case OneofSysOneofCase.ErrorMsg:
          ErrorMsg = other.ErrorMsg.Clone();
          break;
        case OneofSysOneofCase.HiMsg:
          HiMsg = other.HiMsg.Clone();
          break;
        case OneofSysOneofCase.RedirectMsg:
          RedirectMsg = other.RedirectMsg.Clone();
          break;
        case OneofSysOneofCase.StatMsg:
          StatMsg = other.StatMsg.Clone();
          break;
        case OneofSysOneofCase.RoomMigrationMsg:
          RoomMigrationMsg = other.RoomMigrationMsg.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMsg Clone() {
      return new SystemMsg(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::VrLifeServer.Networking.NetworkingModels.SystemMsgType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeServer.Networking.NetworkingModels.SystemMsgType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "okMsg" field.</summary>
    public const int OkMsgFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeServer.Networking.NetworkingModels.OkMsg OkMsg {
      get { return oneofSysCase_ == OneofSysOneofCase.OkMsg ? (global::VrLifeServer.Networking.NetworkingModels.OkMsg) oneofSys_ : null; }
      set {
        oneofSys_ = value;
        oneofSysCase_ = value == null ? OneofSysOneofCase.None : OneofSysOneofCase.OkMsg;
      }
    }

    /// <summary>Field number for the "errorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeServer.Networking.NetworkingModels.ErrorMsg ErrorMsg {
      get { return oneofSysCase_ == OneofSysOneofCase.ErrorMsg ? (global::VrLifeServer.Networking.NetworkingModels.ErrorMsg) oneofSys_ : null; }
      set {
        oneofSys_ = value;
        oneofSysCase_ = value == null ? OneofSysOneofCase.None : OneofSysOneofCase.ErrorMsg;
      }
    }

    /// <summary>Field number for the "hiMsg" field.</summary>
    public const int HiMsgFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeServer.Networking.NetworkingModels.HiMsg HiMsg {
      get { return oneofSysCase_ == OneofSysOneofCase.HiMsg ? (global::VrLifeServer.Networking.NetworkingModels.HiMsg) oneofSys_ : null; }
      set {
        oneofSys_ = value;
        oneofSysCase_ = value == null ? OneofSysOneofCase.None : OneofSysOneofCase.HiMsg;
      }
    }

    /// <summary>Field number for the "redirectMsg" field.</summary>
    public const int RedirectMsgFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeServer.Networking.NetworkingModels.RedirectMsg RedirectMsg {
      get { return oneofSysCase_ == OneofSysOneofCase.RedirectMsg ? (global::VrLifeServer.Networking.NetworkingModels.RedirectMsg) oneofSys_ : null; }
      set {
        oneofSys_ = value;
        oneofSysCase_ = value == null ? OneofSysOneofCase.None : OneofSysOneofCase.RedirectMsg;
      }
    }

    /// <summary>Field number for the "statMsg" field.</summary>
    public const int StatMsgFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeServer.Networking.NetworkingModels.StatMsg StatMsg {
      get { return oneofSysCase_ == OneofSysOneofCase.StatMsg ? (global::VrLifeServer.Networking.NetworkingModels.StatMsg) oneofSys_ : null; }
      set {
        oneofSys_ = value;
        oneofSysCase_ = value == null ? OneofSysOneofCase.None : OneofSysOneofCase.StatMsg;
      }
    }

    /// <summary>Field number for the "roomMigrationMsg" field.</summary>
    public const int RoomMigrationMsgFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrLifeServer.Networking.NetworkingModels.RoomMigrationMsg RoomMigrationMsg {
      get { return oneofSysCase_ == OneofSysOneofCase.RoomMigrationMsg ? (global::VrLifeServer.Networking.NetworkingModels.RoomMigrationMsg) oneofSys_ : null; }
      set {
        oneofSys_ = value;
        oneofSysCase_ = value == null ? OneofSysOneofCase.None : OneofSysOneofCase.RoomMigrationMsg;
      }
    }

    private object oneofSys_;
    /// <summary>Enum of possible cases for the "oneof_sys" oneof.</summary>
    public enum OneofSysOneofCase {
      None = 0,
      OkMsg = 2,
      ErrorMsg = 3,
      HiMsg = 4,
      RedirectMsg = 5,
      StatMsg = 6,
      RoomMigrationMsg = 7,
    }
    private OneofSysOneofCase oneofSysCase_ = OneofSysOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofSysOneofCase OneofSysCase {
      get { return oneofSysCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofSys() {
      oneofSysCase_ = OneofSysOneofCase.None;
      oneofSys_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SystemMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SystemMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(OkMsg, other.OkMsg)) return false;
      if (!object.Equals(ErrorMsg, other.ErrorMsg)) return false;
      if (!object.Equals(HiMsg, other.HiMsg)) return false;
      if (!object.Equals(RedirectMsg, other.RedirectMsg)) return false;
      if (!object.Equals(StatMsg, other.StatMsg)) return false;
      if (!object.Equals(RoomMigrationMsg, other.RoomMigrationMsg)) return false;
      if (OneofSysCase != other.OneofSysCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (oneofSysCase_ == OneofSysOneofCase.OkMsg) hash ^= OkMsg.GetHashCode();
      if (oneofSysCase_ == OneofSysOneofCase.ErrorMsg) hash ^= ErrorMsg.GetHashCode();
      if (oneofSysCase_ == OneofSysOneofCase.HiMsg) hash ^= HiMsg.GetHashCode();
      if (oneofSysCase_ == OneofSysOneofCase.RedirectMsg) hash ^= RedirectMsg.GetHashCode();
      if (oneofSysCase_ == OneofSysOneofCase.StatMsg) hash ^= StatMsg.GetHashCode();
      if (oneofSysCase_ == OneofSysOneofCase.RoomMigrationMsg) hash ^= RoomMigrationMsg.GetHashCode();
      hash ^= (int) oneofSysCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (oneofSysCase_ == OneofSysOneofCase.OkMsg) {
        output.WriteRawTag(18);
        output.WriteMessage(OkMsg);
      }
      if (oneofSysCase_ == OneofSysOneofCase.ErrorMsg) {
        output.WriteRawTag(26);
        output.WriteMessage(ErrorMsg);
      }
      if (oneofSysCase_ == OneofSysOneofCase.HiMsg) {
        output.WriteRawTag(34);
        output.WriteMessage(HiMsg);
      }
      if (oneofSysCase_ == OneofSysOneofCase.RedirectMsg) {
        output.WriteRawTag(42);
        output.WriteMessage(RedirectMsg);
      }
      if (oneofSysCase_ == OneofSysOneofCase.StatMsg) {
        output.WriteRawTag(50);
        output.WriteMessage(StatMsg);
      }
      if (oneofSysCase_ == OneofSysOneofCase.RoomMigrationMsg) {
        output.WriteRawTag(58);
        output.WriteMessage(RoomMigrationMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (oneofSysCase_ == OneofSysOneofCase.OkMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OkMsg);
      }
      if (oneofSysCase_ == OneofSysOneofCase.ErrorMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ErrorMsg);
      }
      if (oneofSysCase_ == OneofSysOneofCase.HiMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HiMsg);
      }
      if (oneofSysCase_ == OneofSysOneofCase.RedirectMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedirectMsg);
      }
      if (oneofSysCase_ == OneofSysOneofCase.StatMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatMsg);
      }
      if (oneofSysCase_ == OneofSysOneofCase.RoomMigrationMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomMigrationMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SystemMsg other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      switch (other.OneofSysCase) {
        case OneofSysOneofCase.OkMsg:
          OkMsg = other.OkMsg;
          break;
        case OneofSysOneofCase.ErrorMsg:
          ErrorMsg = other.ErrorMsg;
          break;
        case OneofSysOneofCase.HiMsg:
          HiMsg = other.HiMsg;
          break;
        case OneofSysOneofCase.RedirectMsg:
          RedirectMsg = other.RedirectMsg;
          break;
        case OneofSysOneofCase.StatMsg:
          StatMsg = other.StatMsg;
          break;
        case OneofSysOneofCase.RoomMigrationMsg:
          RoomMigrationMsg = other.RoomMigrationMsg;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::VrLifeServer.Networking.NetworkingModels.SystemMsgType) input.ReadEnum();
            break;
          }
          case 18: {
            global::VrLifeServer.Networking.NetworkingModels.OkMsg subBuilder = new global::VrLifeServer.Networking.NetworkingModels.OkMsg();
            if (oneofSysCase_ == OneofSysOneofCase.OkMsg) {
              subBuilder.MergeFrom(OkMsg);
            }
            input.ReadMessage(subBuilder);
            OkMsg = subBuilder;
            break;
          }
          case 26: {
            global::VrLifeServer.Networking.NetworkingModels.ErrorMsg subBuilder = new global::VrLifeServer.Networking.NetworkingModels.ErrorMsg();
            if (oneofSysCase_ == OneofSysOneofCase.ErrorMsg) {
              subBuilder.MergeFrom(ErrorMsg);
            }
            input.ReadMessage(subBuilder);
            ErrorMsg = subBuilder;
            break;
          }
          case 34: {
            global::VrLifeServer.Networking.NetworkingModels.HiMsg subBuilder = new global::VrLifeServer.Networking.NetworkingModels.HiMsg();
            if (oneofSysCase_ == OneofSysOneofCase.HiMsg) {
              subBuilder.MergeFrom(HiMsg);
            }
            input.ReadMessage(subBuilder);
            HiMsg = subBuilder;
            break;
          }
          case 42: {
            global::VrLifeServer.Networking.NetworkingModels.RedirectMsg subBuilder = new global::VrLifeServer.Networking.NetworkingModels.RedirectMsg();
            if (oneofSysCase_ == OneofSysOneofCase.RedirectMsg) {
              subBuilder.MergeFrom(RedirectMsg);
            }
            input.ReadMessage(subBuilder);
            RedirectMsg = subBuilder;
            break;
          }
          case 50: {
            global::VrLifeServer.Networking.NetworkingModels.StatMsg subBuilder = new global::VrLifeServer.Networking.NetworkingModels.StatMsg();
            if (oneofSysCase_ == OneofSysOneofCase.StatMsg) {
              subBuilder.MergeFrom(StatMsg);
            }
            input.ReadMessage(subBuilder);
            StatMsg = subBuilder;
            break;
          }
          case 58: {
            global::VrLifeServer.Networking.NetworkingModels.RoomMigrationMsg subBuilder = new global::VrLifeServer.Networking.NetworkingModels.RoomMigrationMsg();
            if (oneofSysCase_ == OneofSysOneofCase.RoomMigrationMsg) {
              subBuilder.MergeFrom(RoomMigrationMsg);
            }
            input.ReadMessage(subBuilder);
            RoomMigrationMsg = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class OkMsg : pb::IMessage<OkMsg> {
    private static readonly pb::MessageParser<OkMsg> _parser = new pb::MessageParser<OkMsg>(() => new OkMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OkMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeServer.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OkMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OkMsg(OkMsg other) : this() {
      msgId_ = other.msgId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OkMsg Clone() {
      return new OkMsg(this);
    }

    /// <summary>Field number for the "msgId" field.</summary>
    public const int MsgIdFieldNumber = 1;
    private ulong msgId_;
    /// <summary>
    ///  confirmed message ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OkMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OkMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgId != other.MsgId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgId != 0UL) hash ^= MsgId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OkMsg other) {
      if (other == null) {
        return;
      }
      if (other.MsgId != 0UL) {
        MsgId = other.MsgId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MsgId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ErrorMsg : pb::IMessage<ErrorMsg> {
    private static readonly pb::MessageParser<ErrorMsg> _parser = new pb::MessageParser<ErrorMsg>(() => new ErrorMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeServer.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorMsg(ErrorMsg other) : this() {
      msgId_ = other.msgId_;
      errorType_ = other.errorType_;
      errorCode_ = other.errorCode_;
      errorMsg_ = other.errorMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorMsg Clone() {
      return new ErrorMsg(this);
    }

    /// <summary>Field number for the "msgId" field.</summary>
    public const int MsgIdFieldNumber = 1;
    private ulong msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "errorType" field.</summary>
    public const int ErrorTypeFieldNumber = 2;
    private uint errorType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorType {
      get { return errorType_; }
      set {
        errorType_ = value;
      }
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 3;
    private uint errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "errorMsg" field.</summary>
    public const int ErrorMsg_FieldNumber = 4;
    private string errorMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg_ {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgId != other.MsgId) return false;
      if (ErrorType != other.ErrorType) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMsg_ != other.ErrorMsg_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgId != 0UL) hash ^= MsgId.GetHashCode();
      if (ErrorType != 0) hash ^= ErrorType.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorMsg_.Length != 0) hash ^= ErrorMsg_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgId);
      }
      if (ErrorType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ErrorType);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ErrorCode);
      }
      if (ErrorMsg_.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ErrorMsg_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgId);
      }
      if (ErrorType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrorType);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrorCode);
      }
      if (ErrorMsg_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg_);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorMsg other) {
      if (other == null) {
        return;
      }
      if (other.MsgId != 0UL) {
        MsgId = other.MsgId;
      }
      if (other.ErrorType != 0) {
        ErrorType = other.ErrorType;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMsg_.Length != 0) {
        ErrorMsg_ = other.ErrorMsg_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MsgId = input.ReadUInt64();
            break;
          }
          case 16: {
            ErrorType = input.ReadUInt32();
            break;
          }
          case 24: {
            ErrorCode = input.ReadUInt32();
            break;
          }
          case 34: {
            ErrorMsg_ = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HiMsg : pb::IMessage<HiMsg> {
    private static readonly pb::MessageParser<HiMsg> _parser = new pb::MessageParser<HiMsg>(() => new HiMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HiMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeServer.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HiMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HiMsg(HiMsg other) : this() {
      threads_ = other.threads_;
      memory_ = other.memory_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HiMsg Clone() {
      return new HiMsg(this);
    }

    /// <summary>Field number for the "threads" field.</summary>
    public const int ThreadsFieldNumber = 1;
    private uint threads_;
    /// <summary>
    ///  number of machine's threads
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Threads {
      get { return threads_; }
      set {
        threads_ = value;
      }
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 2;
    private ulong memory_;
    /// <summary>
    ///  number of RAM in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Memory {
      get { return memory_; }
      set {
        memory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HiMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HiMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Threads != other.Threads) return false;
      if (Memory != other.Memory) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Threads != 0) hash ^= Threads.GetHashCode();
      if (Memory != 0UL) hash ^= Memory.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Threads != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Threads);
      }
      if (Memory != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Memory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Threads != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Threads);
      }
      if (Memory != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Memory);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HiMsg other) {
      if (other == null) {
        return;
      }
      if (other.Threads != 0) {
        Threads = other.Threads;
      }
      if (other.Memory != 0UL) {
        Memory = other.Memory;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Threads = input.ReadUInt32();
            break;
          }
          case 16: {
            Memory = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  redirection to server which takes care of this client
  /// </summary>
  public sealed partial class RedirectMsg : pb::IMessage<RedirectMsg> {
    private static readonly pb::MessageParser<RedirectMsg> _parser = new pb::MessageParser<RedirectMsg>(() => new RedirectMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedirectMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeServer.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectMsg(RedirectMsg other) : this() {
      address_ = other.address_;
      port_ = other.port_;
      receivedMsg_ = other.receivedMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectMsg Clone() {
      return new RedirectMsg(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private long address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "receivedMsg" field.</summary>
    public const int ReceivedMsgFieldNumber = 3;
    private pb::ByteString receivedMsg_ = pb::ByteString.Empty;
    /// <summary>
    ///  message which server received from client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReceivedMsg {
      get { return receivedMsg_; }
      set {
        receivedMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedirectMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedirectMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Port != other.Port) return false;
      if (ReceivedMsg != other.ReceivedMsg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address != 0L) hash ^= Address.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ReceivedMsg.Length != 0) hash ^= ReceivedMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Address);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (ReceivedMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ReceivedMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address != 0L) {
        size += 1 + 8;
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (ReceivedMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReceivedMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedirectMsg other) {
      if (other == null) {
        return;
      }
      if (other.Address != 0L) {
        Address = other.Address;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ReceivedMsg.Length != 0) {
        ReceivedMsg = other.ReceivedMsg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Address = input.ReadSFixed64();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 26: {
            ReceivedMsg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatMsg : pb::IMessage<StatMsg> {
    private static readonly pb::MessageParser<StatMsg> _parser = new pb::MessageParser<StatMsg>(() => new StatMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeServer.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatMsg(StatMsg other) : this() {
      threadUsage_ = other.threadUsage_.Clone();
      memoryUsed_ = other.memoryUsed_;
      memoryTotal_ = other.memoryTotal_;
      rooms_ = other.rooms_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatMsg Clone() {
      return new StatMsg(this);
    }

    /// <summary>Field number for the "threadUsage" field.</summary>
    public const int ThreadUsageFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_threadUsage_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> threadUsage_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  percentage usage of all threads
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ThreadUsage {
      get { return threadUsage_; }
    }

    /// <summary>Field number for the "memoryUsed" field.</summary>
    public const int MemoryUsedFieldNumber = 2;
    private ulong memoryUsed_;
    /// <summary>
    ///  used RAM of machine in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemoryUsed {
      get { return memoryUsed_; }
      set {
        memoryUsed_ = value;
      }
    }

    /// <summary>Field number for the "memoryTotal" field.</summary>
    public const int MemoryTotalFieldNumber = 3;
    private ulong memoryTotal_;
    /// <summary>
    ///  total available RAM in machine
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemoryTotal {
      get { return memoryTotal_; }
      set {
        memoryTotal_ = value;
      }
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 4;
    private uint rooms_;
    /// <summary>
    ///  number of running rooms on machine
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rooms {
      get { return rooms_; }
      set {
        rooms_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!threadUsage_.Equals(other.threadUsage_)) return false;
      if (MemoryUsed != other.MemoryUsed) return false;
      if (MemoryTotal != other.MemoryTotal) return false;
      if (Rooms != other.Rooms) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= threadUsage_.GetHashCode();
      if (MemoryUsed != 0UL) hash ^= MemoryUsed.GetHashCode();
      if (MemoryTotal != 0UL) hash ^= MemoryTotal.GetHashCode();
      if (Rooms != 0) hash ^= Rooms.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      threadUsage_.WriteTo(output, _repeated_threadUsage_codec);
      if (MemoryUsed != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MemoryUsed);
      }
      if (MemoryTotal != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MemoryTotal);
      }
      if (Rooms != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Rooms);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += threadUsage_.CalculateSize(_repeated_threadUsage_codec);
      if (MemoryUsed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemoryUsed);
      }
      if (MemoryTotal != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemoryTotal);
      }
      if (Rooms != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rooms);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatMsg other) {
      if (other == null) {
        return;
      }
      threadUsage_.Add(other.threadUsage_);
      if (other.MemoryUsed != 0UL) {
        MemoryUsed = other.MemoryUsed;
      }
      if (other.MemoryTotal != 0UL) {
        MemoryTotal = other.MemoryTotal;
      }
      if (other.Rooms != 0) {
        Rooms = other.Rooms;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            threadUsage_.AddEntriesFrom(input, _repeated_threadUsage_codec);
            break;
          }
          case 16: {
            MemoryUsed = input.ReadUInt64();
            break;
          }
          case 24: {
            MemoryTotal = input.ReadUInt64();
            break;
          }
          case 32: {
            Rooms = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  migration message to another server
  /// </summary>
  public sealed partial class RoomMigrationMsg : pb::IMessage<RoomMigrationMsg> {
    private static readonly pb::MessageParser<RoomMigrationMsg> _parser = new pb::MessageParser<RoomMigrationMsg>(() => new RoomMigrationMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomMigrationMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrLifeServer.Networking.NetworkingModels.SystemMsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMigrationMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMigrationMsg(RoomMigrationMsg other) : this() {
      md5SumH_ = other.md5SumH_;
      md5SumL_ = other.md5SumL_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMigrationMsg Clone() {
      return new RoomMigrationMsg(this);
    }

    /// <summary>Field number for the "md5sumH" field.</summary>
    public const int Md5SumHFieldNumber = 1;
    private long md5SumH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Md5SumH {
      get { return md5SumH_; }
      set {
        md5SumH_ = value;
      }
    }

    /// <summary>Field number for the "md5sumL" field.</summary>
    public const int Md5SumLFieldNumber = 2;
    private long md5SumL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Md5SumL {
      get { return md5SumL_; }
      set {
        md5SumL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomMigrationMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomMigrationMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Md5SumH != other.Md5SumH) return false;
      if (Md5SumL != other.Md5SumL) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Md5SumH != 0L) hash ^= Md5SumH.GetHashCode();
      if (Md5SumL != 0L) hash ^= Md5SumL.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Md5SumH != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Md5SumH);
      }
      if (Md5SumL != 0L) {
        output.WriteRawTag(17);
        output.WriteSFixed64(Md5SumL);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Md5SumH != 0L) {
        size += 1 + 8;
      }
      if (Md5SumL != 0L) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomMigrationMsg other) {
      if (other == null) {
        return;
      }
      if (other.Md5SumH != 0L) {
        Md5SumH = other.Md5SumH;
      }
      if (other.Md5SumL != 0L) {
        Md5SumL = other.Md5SumL;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Md5SumH = input.ReadSFixed64();
            break;
          }
          case 17: {
            Md5SumL = input.ReadSFixed64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
